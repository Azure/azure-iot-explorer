//// This code is generated by a tool
/* tslint:disable */
export class ResourceKeys {
    public static breadcrumb = {
      addDevice : "breadcrumb.addDevice",
      devices : "breadcrumb.devices",
      hub : "breadcrumb.hub",
   };
   public static common = {
      close : "common.close",
      learnMore : "common.learnMore",
      loading : "common.loading",
      maskedCopyableTextField : {
         copy : {
            ariaLabel : "common.maskedCopyableTextField.copy.ariaLabel",
            label : "common.maskedCopyableTextField.copy.label",
         },
         toggleMask : {
            ariaLabel : "common.maskedCopyableTextField.toggleMask.ariaLabel",
            label : "common.maskedCopyableTextField.toggleMask.label",
         },
      },
   };
   public static connectivityPane = {
      connectionStringCheckbox : {
         ariaLabel : "connectivityPane.connectionStringCheckbox.ariaLabel",
         label : "connectivityPane.connectionStringCheckbox.label",
         tooltip : "connectivityPane.connectionStringCheckbox.tooltip",
      },
      connectionStringTextBox : {
         errorMessages : {
            invalid : "connectivityPane.connectionStringTextBox.errorMessages.invalid",
            required : "connectivityPane.connectionStringTextBox.errorMessages.required",
         },
         label : "connectivityPane.connectionStringTextBox.label",
         subLabel : "connectivityPane.connectionStringTextBox.subLabel",
      },
      header : "connectivityPane.header",
      notes : "connectivityPane.notes",
      saveButton : {
         label : "connectivityPane.saveButton.label",
      },
   };
   public static deviceCommands = {
      columns : {
         name : "deviceCommands.columns.name",
         schema : {
            request : "deviceCommands.columns.schema.request",
            response : "deviceCommands.columns.schema.response",
         },
         type : "deviceCommands.columns.type",
      },
      command : {
         collapse : "deviceCommands.command.collapse",
         collapseAll : "deviceCommands.command.collapseAll",
         expand : "deviceCommands.command.expand",
         expandAll : "deviceCommands.command.expandAll",
         refresh : "deviceCommands.command.refresh",
         submit : "deviceCommands.command.submit",
      },
      headerText : "deviceCommands.headerText",
      noCommands : "deviceCommands.noCommands",
   };
   public static deviceContent = {
      navBar : {
         add : "deviceContent.navBar.add",
         collapse : "deviceContent.navBar.collapse",
         commands : "deviceContent.navBar.commands",
         events : "deviceContent.navBar.events",
         eventsPerInterface : "deviceContent.navBar.eventsPerInterface",
         expand : "deviceContent.navBar.expand",
         identity : "deviceContent.navBar.identity",
         interfaces : "deviceContent.navBar.interfaces",
         methods : "deviceContent.navBar.methods",
         nonpnp : "deviceContent.navBar.nonpnp",
         pnp : "deviceContent.navBar.pnp",
         properties : "deviceContent.navBar.properties",
         settings : "deviceContent.navBar.settings",
         twin : "deviceContent.navBar.twin",
      },
      start : "deviceContent.start",
      value : "deviceContent.value",
   };
   public static deviceEvents = {
      columns : {
         displayName : "deviceEvents.columns.displayName",
         error : {
            key : {
               errorContent : "deviceEvents.columns.error.key.errorContent",
               label : "deviceEvents.columns.error.key.label",
            },
            value : {
               label : "deviceEvents.columns.error.value.label",
            },
         },
         schema : "deviceEvents.columns.schema",
         timestamp : "deviceEvents.columns.timestamp",
         unit : "deviceEvents.columns.unit",
         value : "deviceEvents.columns.value",
      },
      command : {
         clearEvents : "deviceEvents.command.clearEvents",
         refresh : "deviceEvents.command.refresh",
         showSystemProperties : "deviceEvents.command.showSystemProperties",
         start : "deviceEvents.command.start",
         stop : "deviceEvents.command.stop",
      },
      consumerGroups : {
         label : "deviceEvents.consumerGroups.label",
         tooltip : "deviceEvents.consumerGroups.tooltip",
      },
      event : {
         body : "deviceEvents.event.body",
         enqueuedTime : "deviceEvents.event.enqueuedTime",
         properties : "deviceEvents.event.properties",
      },
      headerText : "deviceEvents.headerText",
      infiniteScroll : {
         loading : "deviceEvents.infiniteScroll.loading",
      },
      interfaceDropDown : {
         label : "deviceEvents.interfaceDropDown.label",
         placeHolder : "deviceEvents.interfaceDropDown.placeHolder",
      },
   };
   public static deviceIdentity = {
      authenticationType : {
         ca : {
            text : "deviceIdentity.authenticationType.ca.text",
            type : "deviceIdentity.authenticationType.ca.type",
         },
         selfSigned : {
            primaryThumbprint : "deviceIdentity.authenticationType.selfSigned.primaryThumbprint",
            primaryThumbprintTooltip : "deviceIdentity.authenticationType.selfSigned.primaryThumbprintTooltip",
            secondaryThumbprint : "deviceIdentity.authenticationType.selfSigned.secondaryThumbprint",
            secondaryThumbprintTooltip : "deviceIdentity.authenticationType.selfSigned.secondaryThumbprintTooltip",
            text : "deviceIdentity.authenticationType.selfSigned.text",
            type : "deviceIdentity.authenticationType.selfSigned.type",
         },
         symmetricKey : {
            autoGenerate : "deviceIdentity.authenticationType.symmetricKey.autoGenerate",
            generatePrimaryKey : "deviceIdentity.authenticationType.symmetricKey.generatePrimaryKey",
            generateSecondaryKey : "deviceIdentity.authenticationType.symmetricKey.generateSecondaryKey",
            primaryConnectionString : "deviceIdentity.authenticationType.symmetricKey.primaryConnectionString",
            primaryConnectionStringTooltip : "deviceIdentity.authenticationType.symmetricKey.primaryConnectionStringTooltip",
            primaryKey : "deviceIdentity.authenticationType.symmetricKey.primaryKey",
            secondaryConnectionString : "deviceIdentity.authenticationType.symmetricKey.secondaryConnectionString",
            secondaryConnectionStringTooltip : "deviceIdentity.authenticationType.symmetricKey.secondaryConnectionStringTooltip",
            secondaryKey : "deviceIdentity.authenticationType.symmetricKey.secondaryKey",
            type : "deviceIdentity.authenticationType.symmetricKey.type",
         },
         text : "deviceIdentity.authenticationType.text",
      },
      commands : {
         manageKeys : {
            ariaLabel : "deviceIdentity.commands.manageKeys.ariaLabel",
            label : "deviceIdentity.commands.manageKeys.label",
         },
         regeneratePrimary : {
            ariaLabel : "deviceIdentity.commands.regeneratePrimary.ariaLabel",
            label : "deviceIdentity.commands.regeneratePrimary.label",
         },
         regenerateSecondary : {
            ariaLabel : "deviceIdentity.commands.regenerateSecondary.ariaLabel",
            label : "deviceIdentity.commands.regenerateSecondary.label",
         },
         save : "deviceIdentity.commands.save",
         swapKeys : {
            ariaLabel : "deviceIdentity.commands.swapKeys.ariaLabel",
            label : "deviceIdentity.commands.swapKeys.label",
         },
      },
      deviceID : "deviceIdentity.deviceID",
      deviceIDTooltip : "deviceIdentity.deviceIDTooltip",
      headerText : "deviceIdentity.headerText",
      hubConnectivity : {
         disable : "deviceIdentity.hubConnectivity.disable",
         disabled : "deviceIdentity.hubConnectivity.disabled",
         enable : "deviceIdentity.hubConnectivity.enable",
         enabled : "deviceIdentity.hubConnectivity.enabled",
         label : "deviceIdentity.hubConnectivity.label",
         tooltip : "deviceIdentity.hubConnectivity.tooltip",
      },
      validation : {
         invalidDeviceId : "deviceIdentity.validation.invalidDeviceId",
         invalidKey : "deviceIdentity.validation.invalidKey",
         invalidThumbprint : "deviceIdentity.validation.invalidThumbprint",
      },
   };
   public static deviceInterfaces = {
      columns : {
         description : "deviceInterfaces.columns.description",
         displayName : "deviceInterfaces.columns.displayName",
         noSource : "deviceInterfaces.columns.noSource",
         source : "deviceInterfaces.columns.source",
      },
      command : {
         configure : "deviceInterfaces.command.configure",
         refresh : "deviceInterfaces.command.refresh",
      },
      headerText : "deviceInterfaces.headerText",
      noInterfaces : "deviceInterfaces.noInterfaces",
   };
   public static deviceLists = {
      columns : {
         authenticationType : "deviceLists.columns.authenticationType",
         cloudToDeviceMessageCount : "deviceLists.columns.cloudToDeviceMessageCount",
         deviceId : {
            infoText : "deviceLists.columns.deviceId.infoText",
            label : "deviceLists.columns.deviceId.label",
         },
         interfaces : "deviceLists.columns.interfaces",
         isEdgeDevice : "deviceLists.columns.isEdgeDevice",
         isPnpDevice : "deviceLists.columns.isPnpDevice",
         lastActivityTime : "deviceLists.columns.lastActivityTime",
         status : {
            infoText : "deviceLists.columns.status.infoText",
            label : "deviceLists.columns.status.label",
         },
         statusUpdatedTime : "deviceLists.columns.statusUpdatedTime",
      },
      commands : {
         add : "deviceLists.commands.add",
         close : "deviceLists.commands.close",
         delete : {
            buttonText : "deviceLists.commands.delete.buttonText",
            confirmationDialog : {
               cancel : "deviceLists.commands.delete.confirmationDialog.cancel",
               confirm : "deviceLists.commands.delete.confirmationDialog.confirm",
               subText : "deviceLists.commands.delete.confirmationDialog.subText",
               title : "deviceLists.commands.delete.confirmationDialog.title",
            },
         },
         refresh : "deviceLists.commands.refresh",
         save : "deviceLists.commands.save",
      },
      loadingDevice : "deviceLists.loadingDevice",
      noData : "deviceLists.noData",
      noDevice : "deviceLists.noDevice",
      paging : {
         pages : "deviceLists.paging.pages",
      },
      query : {
         deviceId : {
            ariaLabel : "deviceLists.query.deviceId.ariaLabel",
            placeholder : "deviceLists.query.deviceId.placeholder",
            searchButton : {
               ariaLabel : "deviceLists.query.deviceId.searchButton.ariaLabel",
               title : "deviceLists.query.deviceId.searchButton.title",
            },
         },
         searchPills : {
            add : {
               ariaLabel : "deviceLists.query.searchPills.add.ariaLabel",
               text : "deviceLists.query.searchPills.add.text",
               title : "deviceLists.query.searchPills.add.title",
            },
            clause : {
               operationType : {
                  ariaLabel : "deviceLists.query.searchPills.clause.operationType.ariaLabel",
                  title : "deviceLists.query.searchPills.clause.operationType.title",
               },
               parameterType : {
                  ariaLabel : "deviceLists.query.searchPills.clause.parameterType.ariaLabel",
                  items : {
                     capabilityModelId : "deviceLists.query.searchPills.clause.parameterType.items.capabilityModelId",
                     interfaceId : "deviceLists.query.searchPills.clause.parameterType.items.interfaceId",
                     lastActivityTime : "deviceLists.query.searchPills.clause.parameterType.items.lastActivityTime",
                     propertyValue : "deviceLists.query.searchPills.clause.parameterType.items.propertyValue",
                     status : "deviceLists.query.searchPills.clause.parameterType.items.status",
                     statusUpdateTime : "deviceLists.query.searchPills.clause.parameterType.items.statusUpdateTime",
                  },
                  title : "deviceLists.query.searchPills.clause.parameterType.title",
               },
               remove : {
                  ariaLabel : "deviceLists.query.searchPills.clause.remove.ariaLabel",
                  title : "deviceLists.query.searchPills.clause.remove.title",
               },
               value : {
                  ariaLabel : "deviceLists.query.searchPills.clause.value.ariaLabel",
                  placeholder : "deviceLists.query.searchPills.clause.value.placeholder",
                  title : "deviceLists.query.searchPills.clause.value.title",
               },
            },
            search : {
               ariaLabel : "deviceLists.query.searchPills.search.ariaLabel",
               text : "deviceLists.query.searchPills.search.text",
               title : "deviceLists.query.searchPills.search.title",
            },
         },
      },
   };
   public static deviceMethods = {
      connectionTimeout : "deviceMethods.connectionTimeout",
      invokeMethodButtonText : "deviceMethods.invokeMethodButtonText",
      methodName : "deviceMethods.methodName",
      methodTimeout : "deviceMethods.methodTimeout",
   };
   public static deviceProperties = {
      columns : {
         error : "deviceProperties.columns.error",
         name : "deviceProperties.columns.name",
         schema : "deviceProperties.columns.schema",
         unit : "deviceProperties.columns.unit",
         value : "deviceProperties.columns.value",
      },
      command : {
         openReportedValuePanel : "deviceProperties.command.openReportedValuePanel",
         refresh : "deviceProperties.command.refresh",
      },
      editor : {
         label : "deviceProperties.editor.label",
      },
      headerText : "deviceProperties.headerText",
      noProperty : "deviceProperties.noProperty",
   };
   public static deviceSettings = {
      columns : {
         error : "deviceSettings.columns.error",
         name : "deviceSettings.columns.name",
         reportedValue : "deviceSettings.columns.reportedValue",
         schema : "deviceSettings.columns.schema",
         unit : "deviceSettings.columns.unit",
      },
      command : {
         collapse : "deviceSettings.command.collapse",
         collapseAll : "deviceSettings.command.collapseAll",
         expand : "deviceSettings.command.expand",
         expandAll : "deviceSettings.command.expandAll",
         openDesiredValuePanel : "deviceSettings.command.openDesiredValuePanel",
         openReportedValuePanel : "deviceSettings.command.openReportedValuePanel",
         refresh : "deviceSettings.command.refresh",
         submit : "deviceSettings.command.submit",
      },
      desiredState : {
         error : "deviceSettings.desiredState.error",
         success : "deviceSettings.desiredState.success",
         synching : "deviceSettings.desiredState.synching",
         unknown : "deviceSettings.desiredState.unknown",
      },
      headerText : "deviceSettings.headerText",
      noSetting : "deviceSettings.noSetting",
      panel : {
         title : "deviceSettings.panel.title",
      },
      previewPayloadButtonText : "deviceSettings.previewPayloadButtonText",
      syncStatus : {
         failed : "deviceSettings.syncStatus.failed",
         label : "deviceSettings.syncStatus.label",
         synced : "deviceSettings.syncStatus.synced",
         syncing : "deviceSettings.syncStatus.syncing",
      },
   };
   public static deviceTwin = {
      command : {
         refresh : "deviceTwin.command.refresh",
         save : "deviceTwin.command.save",
      },
      headerText : "deviceTwin.headerText",
      notFound : "deviceTwin.notFound",
   };
   public static errorBoundary = {
      text : "errorBoundary.text",
   };
   public static header = {
      applicationName : "header.applicationName",
      notifications : {
         dismiss : "header.notifications.dismiss",
         hide : "header.notifications.hide",
         panel : {
            noNotifications : "header.notifications.panel.noNotifications",
            title : "header.notifications.panel.title",
         },
         show : "header.notifications.show",
      },
      questions : {
         launch : "header.questions.launch",
      },
      search : {
         watermark : "header.search.watermark",
      },
      settings : {
         launch : "header.settings.launch",
      },
   };
   public static noMatchError = {
      description : "noMatchError.description",
      goHome : "noMatchError.goHome",
      title : "noMatchError.title",
   };
   public static notifications = {
      addDeviceOnError : "notifications.addDeviceOnError",
      addDeviceOnSucceed : "notifications.addDeviceOnSucceed",
      deleteDeviceOnError : "notifications.deleteDeviceOnError",
      deleteDeviceOnSucceed : "notifications.deleteDeviceOnSucceed",
      getDeviceIdentityOnError : "notifications.getDeviceIdentityOnError",
      getDeviceListOnError : "notifications.getDeviceListOnError",
      getDeviceTwinOnError : "notifications.getDeviceTwinOnError",
      getDigitalTwinInterfacePropertiesOnError : "notifications.getDigitalTwinInterfacePropertiesOnError",
      getInterfaceModelOnError : "notifications.getInterfaceModelOnError",
      interfaceSchemaNotSupported : "notifications.interfaceSchemaNotSupported",
      invokeDigitalTwinCommandOnError : "notifications.invokeDigitalTwinCommandOnError",
      invokeDigitalTwinCommandOnSuccess : "notifications.invokeDigitalTwinCommandOnSuccess",
      invokeMethodOnError : "notifications.invokeMethodOnError",
      invokeMethodOnSuccess : "notifications.invokeMethodOnSuccess",
      invokingDigitalTwinCommand : "notifications.invokingDigitalTwinCommand",
      invokingDigitalTwinCommandWithPayload : "notifications.invokingDigitalTwinCommandWithPayload",
      invokingMethod : "notifications.invokingMethod",
      invokingMethodWithPayload : "notifications.invokingMethodWithPayload",
      patchDigitalTwinInterfacePropertiesOnError : "notifications.patchDigitalTwinInterfacePropertiesOnError",
      patchDigitalTwinInterfacePropertiesOnSuccess : "notifications.patchDigitalTwinInterfacePropertiesOnSuccess",
      savedToIotHubConnectionString : "notifications.savedToIotHubConnectionString",
      updateDeviceOnError : "notifications.updateDeviceOnError",
      updateDeviceOnSucceed : "notifications.updateDeviceOnSucceed",
      updateDeviceTwinOnError : "notifications.updateDeviceTwinOnError",
      updateDeviceTwinOnSuccess : "notifications.updateDeviceTwinOnSuccess",
   };
   public static settings = {
      cancel : "settings.cancel",
      configuration : {
         connectionString : {
            label : "settings.configuration.connectionString.label",
            link : "settings.configuration.connectionString.link",
            sublabel : "settings.configuration.connectionString.sublabel",
         },
         headerText : "settings.configuration.headerText",
      },
      footerText : "settings.footerText",
      headerText : "settings.headerText",
      modelDefinitions : {
         add : "settings.modelDefinitions.add",
         headerText : "settings.modelDefinitions.headerText",
         helpText : "settings.modelDefinitions.helpText",
         repositoryTypes : {
            device : {
               infoText : "settings.modelDefinitions.repositoryTypes.device.infoText",
               label : "settings.modelDefinitions.repositoryTypes.device.label",
            },
            private : {
               infoText : "settings.modelDefinitions.repositoryTypes.private.infoText",
               label : "settings.modelDefinitions.repositoryTypes.private.label",
               textBoxLabel : "settings.modelDefinitions.repositoryTypes.private.textBoxLabel",
            },
            public : {
               infoText : "settings.modelDefinitions.repositoryTypes.public.infoText",
               label : "settings.modelDefinitions.repositoryTypes.public.label",
            },
         },
      },
      questions : {
         headerText : "settings.questions.headerText",
         questions : {
            documentation : {
               link : "settings.questions.questions.documentation.link",
               text : "settings.questions.questions.documentation.text",
            },
         },
      },
      save : "settings.save",
   };
   public static template = {
      array : {
         add : "template.array.add",
         remove : "template.array.remove",
      },
      collapse : {
         close : "template.collapse.close",
         open : "template.collapse.open",
      },
   };
}
/* tslint:enable */

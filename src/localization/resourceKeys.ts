//// This code is generated by a tool
/* tslint:disable */
export class ResourceKeys {
    public static authentication = {
      authSelection : {
         header : "authentication.authSelection.header",
         selection : {
            azureActiveDirectory : "authentication.authSelection.selection.azureActiveDirectory",
            connectionString : "authentication.authSelection.selection.connectionString",
         },
         subText : "authentication.authSelection.subText",
         switchAuthType : "authentication.authSelection.switchAuthType",
      },
      azureActiveDirectory : {
         command : {
            login : "authentication.azureActiveDirectory.command.login",
            logout : "authentication.azureActiveDirectory.command.logout",
         },
         filter : {
            placeHolder : "authentication.azureActiveDirectory.filter.placeHolder",
            result : "authentication.azureActiveDirectory.filter.result",
         },
         hubList : {
            backButton : "authentication.azureActiveDirectory.hubList.backButton",
            columns : {
               location : "authentication.azureActiveDirectory.hubList.columns.location",
               name : "authentication.azureActiveDirectory.hubList.columns.name",
            },
            noItemText : "authentication.azureActiveDirectory.hubList.noItemText",
         },
         notification : {
            getIotHubKeyError : "authentication.azureActiveDirectory.notification.getIotHubKeyError",
            getIotHubListError : "authentication.azureActiveDirectory.notification.getIotHubListError",
            getsubscriptionListError : "authentication.azureActiveDirectory.notification.getsubscriptionListError",
            loginError : "authentication.azureActiveDirectory.notification.loginError",
            logoutError : "authentication.azureActiveDirectory.notification.logoutError",
         },
         subscriptionList : {
            columns : {
               id : "authentication.azureActiveDirectory.subscriptionList.columns.id",
               name : "authentication.azureActiveDirectory.subscriptionList.columns.name",
               state : "authentication.azureActiveDirectory.subscriptionList.columns.state",
            },
            noItemText : "authentication.azureActiveDirectory.subscriptionList.noItemText",
         },
      },
   };
   public static azureResource = {
      access : {
         failed : "azureResource.access.failed",
         unauthorized : "azureResource.access.unauthorized",
         verifying : "azureResource.access.verifying",
      },
   };
   public static breadcrumb = {
      add : "breadcrumb.add",
      addModuleIdentity : "breadcrumb.addModuleIdentity",
      cloudToDeviceMessage : "breadcrumb.cloudToDeviceMessage",
      commands : "breadcrumb.commands",
      devices : "breadcrumb.devices",
      events : "breadcrumb.events",
      eventsPerInterface : "breadcrumb.eventsPerInterface",
      identity : "breadcrumb.identity",
      interfaces : "breadcrumb.interfaces",
      ioTPlugAndPlay : "breadcrumb.ioTPlugAndPlay",
      methods : "breadcrumb.methods",
      moduleDetail : "breadcrumb.moduleDetail",
      moduleEvents : "breadcrumb.moduleEvents",
      moduleIdentity : "breadcrumb.moduleIdentity",
      moduleMethod : "breadcrumb.moduleMethod",
      modulePnp : "breadcrumb.modulePnp",
      moduleTwin : "breadcrumb.moduleTwin",
      navigate : "breadcrumb.navigate",
      notificationCenter : "breadcrumb.notificationCenter",
      properties : "breadcrumb.properties",
      repos : "breadcrumb.repos",
      resources : "breadcrumb.resources",
      settings : "breadcrumb.settings",
      twin : "breadcrumb.twin",
   };
   public static cloudToDeviceMessage = {
      addTimestamp : "cloudToDeviceMessage.addTimestamp",
      body : "cloudToDeviceMessage.body",
      bodyTooltip : "cloudToDeviceMessage.bodyTooltip",
      headerText : "cloudToDeviceMessage.headerText",
      output : "cloudToDeviceMessage.output",
      properties : {
         addCustomProperty : "cloudToDeviceMessage.properties.addCustomProperty",
         addSystemProperty : "cloudToDeviceMessage.properties.addSystemProperty",
         delete : "cloudToDeviceMessage.properties.delete",
         key : "cloudToDeviceMessage.properties.key",
         keyDup : "cloudToDeviceMessage.properties.keyDup",
         label : "cloudToDeviceMessage.properties.label",
         rowCheckBoxAriaLabel : "cloudToDeviceMessage.properties.rowCheckBoxAriaLabel",
         selectAllCheckboxAriaLabel : "cloudToDeviceMessage.properties.selectAllCheckboxAriaLabel",
         systemProperties : {
            ack : {
               description : "cloudToDeviceMessage.properties.systemProperties.ack.description",
               displayName : "cloudToDeviceMessage.properties.systemProperties.ack.displayName",
               full : "cloudToDeviceMessage.properties.systemProperties.ack.full",
               negative : "cloudToDeviceMessage.properties.systemProperties.ack.negative",
               positive : "cloudToDeviceMessage.properties.systemProperties.ack.positive",
            },
            contentEncoding : {
               description : "cloudToDeviceMessage.properties.systemProperties.contentEncoding.description",
               displayName : "cloudToDeviceMessage.properties.systemProperties.contentEncoding.displayName",
               utf16 : "cloudToDeviceMessage.properties.systemProperties.contentEncoding.utf16",
               utf32 : "cloudToDeviceMessage.properties.systemProperties.contentEncoding.utf32",
               utf8 : "cloudToDeviceMessage.properties.systemProperties.contentEncoding.utf8",
            },
            contentType : {
               description : "cloudToDeviceMessage.properties.systemProperties.contentType.description",
               displayName : "cloudToDeviceMessage.properties.systemProperties.contentType.displayName",
            },
            correlationId : {
               description : "cloudToDeviceMessage.properties.systemProperties.correlationId.description",
               displayName : "cloudToDeviceMessage.properties.systemProperties.correlationId.displayName",
            },
            expiryTimeUtc : {
               description : "cloudToDeviceMessage.properties.systemProperties.expiryTimeUtc.description",
               displayName : "cloudToDeviceMessage.properties.systemProperties.expiryTimeUtc.displayName",
               error : "cloudToDeviceMessage.properties.systemProperties.expiryTimeUtc.error",
            },
            lockToken : {
               description : "cloudToDeviceMessage.properties.systemProperties.lockToken.description",
               displayName : "cloudToDeviceMessage.properties.systemProperties.lockToken.displayName",
            },
            messageId : {
               description : "cloudToDeviceMessage.properties.systemProperties.messageId.description",
               displayName : "cloudToDeviceMessage.properties.systemProperties.messageId.displayName",
            },
         },
         toggleSelectionColumnAriaLabel : "cloudToDeviceMessage.properties.toggleSelectionColumnAriaLabel",
         tooltip : "cloudToDeviceMessage.properties.tooltip",
         value : "cloudToDeviceMessage.properties.value",
      },
      sendMessageButtonText : "cloudToDeviceMessage.sendMessageButtonText",
      tooltip : "cloudToDeviceMessage.tooltip",
   };
   public static collapsibleSection = {
      close : "collapsibleSection.close",
      open : "collapsibleSection.open",
   };
   public static common = {
      close : "common.close",
      confirmationDialog : {
         no : "common.confirmationDialog.no",
         title : "common.confirmationDialog.title",
         yes : "common.confirmationDialog.yes",
      },
      home : "common.home",
      learnMore : "common.learnMore",
      loading : "common.loading",
      maskedCopyableTextField : {
         copied : {
            label : "common.maskedCopyableTextField.copied.label",
         },
         copy : {
            label : "common.maskedCopyableTextField.copy.label",
         },
         toggleMask : {
            label : {
               hide : "common.maskedCopyableTextField.toggleMask.label.hide",
               show : "common.maskedCopyableTextField.toggleMask.label.show",
            },
         },
      },
      navigation : {
         collapse : "common.navigation.collapse",
         confirm : "common.navigation.confirm",
         expand : "common.navigation.expand",
      },
      revealPassword : "common.revealPassword",
   };
   public static connectionStrings = {
      addConnectionCommand : {
         ariaLabel : "connectionStrings.addConnectionCommand.ariaLabel",
         label : "connectionStrings.addConnectionCommand.label",
      },
      copyConnectionCommand : {
         ariaLabel : "connectionStrings.copyConnectionCommand.ariaLabel",
         label : "connectionStrings.copyConnectionCommand.label",
      },
      deleteConnection : {
         body : "connectionStrings.deleteConnection.body",
         input : "connectionStrings.deleteConnection.input",
         no : {
            ariaLabel : "connectionStrings.deleteConnection.no.ariaLabel",
            label : "connectionStrings.deleteConnection.no.label",
         },
         title : "connectionStrings.deleteConnection.title",
         yes : {
            ariaLabel : "connectionStrings.deleteConnection.yes.ariaLabel",
            label : "connectionStrings.deleteConnection.yes.label",
         },
      },
      deleteConnectionCommand : {
         ariaLabel : "connectionStrings.deleteConnectionCommand.ariaLabel",
         label : "connectionStrings.deleteConnectionCommand.label",
      },
      editConnection : {
         cancel : {
            ariaLabel : {
               add : "connectionStrings.editConnection.cancel.ariaLabel.add",
               edit : "connectionStrings.editConnection.cancel.ariaLabel.edit",
            },
            label : "connectionStrings.editConnection.cancel.label",
         },
         editField : {
            ariaLabel : "connectionStrings.editConnection.editField.ariaLabel",
            label : "connectionStrings.editConnection.editField.label",
            placeholder : "connectionStrings.editConnection.editField.placeholder",
         },
         save : {
            ariaLabel : "connectionStrings.editConnection.save.ariaLabel",
            label : "connectionStrings.editConnection.save.label",
         },
         title : {
            add : "connectionStrings.editConnection.title.add",
            edit : "connectionStrings.editConnection.title.edit",
         },
         validations : {
            duplicate : "connectionStrings.editConnection.validations.duplicate",
         },
      },
      editConnectionCommand : {
         ariaLabel : "connectionStrings.editConnectionCommand.ariaLabel",
         label : "connectionStrings.editConnectionCommand.label",
      },
      empty : {
         description : "connectionStrings.empty.description",
         header : "connectionStrings.empty.header",
      },
      expirationWarning : "connectionStrings.expirationWarning",
      properties : {
         connectionString : {
            ariaLabel : "connectionStrings.properties.connectionString.ariaLabel",
            label : "connectionStrings.properties.connectionString.label",
         },
         hostName : {
            ariaLabel : "connectionStrings.properties.hostName.ariaLabel",
            label : "connectionStrings.properties.hostName.label",
         },
         sharedAccessPolicyKey : {
            ariaLabel : "connectionStrings.properties.sharedAccessPolicyKey.ariaLabel",
            label : "connectionStrings.properties.sharedAccessPolicyKey.label",
         },
         sharedAccessPolicyName : {
            ariaLabel : "connectionStrings.properties.sharedAccessPolicyName.ariaLabel",
            label : "connectionStrings.properties.sharedAccessPolicyName.label",
         },
      },
      visitConnectionCommand : {
         ariaLabel : "connectionStrings.visitConnectionCommand.ariaLabel",
         label : "connectionStrings.visitConnectionCommand.label",
      },
   };
   public static connectivityPane = {
      connectionStringComboBox : {
         errorMessages : {
            invalid : "connectivityPane.connectionStringComboBox.errorMessages.invalid",
            required : "connectivityPane.connectionStringComboBox.errorMessages.required",
         },
         link : "connectivityPane.connectionStringComboBox.link",
         linkText : "connectivityPane.connectionStringComboBox.linkText",
         warning : "connectivityPane.connectionStringComboBox.warning",
      },
   };
   public static deviceCommands = {
      columns : {
         name : "deviceCommands.columns.name",
         schema : {
            request : "deviceCommands.columns.schema.request",
            response : "deviceCommands.columns.schema.response",
         },
         type : "deviceCommands.columns.type",
      },
      command : {
         close : "deviceCommands.command.close",
         collapse : "deviceCommands.command.collapse",
         collapseAll : "deviceCommands.command.collapseAll",
         expand : "deviceCommands.command.expand",
         expandAll : "deviceCommands.command.expandAll",
         refresh : "deviceCommands.command.refresh",
         submit : "deviceCommands.command.submit",
      },
      confirmSend : {
         body : "deviceCommands.confirmSend.body",
         no : {
            ariaLabel : "deviceCommands.confirmSend.no.ariaLabel",
            label : "deviceCommands.confirmSend.no.label",
         },
         title : "deviceCommands.confirmSend.title",
         yes : {
            ariaLabel : "deviceCommands.confirmSend.yes.ariaLabel",
            label : "deviceCommands.confirmSend.yes.label",
         },
      },
      headerText : "deviceCommands.headerText",
      noCommands : "deviceCommands.noCommands",
   };
   public static deviceContent = {
      start : "deviceContent.start",
      value : "deviceContent.value",
   };
   public static deviceEvents = {
      columns : {
         displayName : "deviceEvents.columns.displayName",
         schema : "deviceEvents.columns.schema",
         timestamp : "deviceEvents.columns.timestamp",
         unit : "deviceEvents.columns.unit",
         validation : {
            key : {
               doesNotMatch : "deviceEvents.columns.validation.key.doesNotMatch",
               isNotSpecified : "deviceEvents.columns.validation.key.isNotSpecified",
            },
            value : {
               bodyIsEmpty : "deviceEvents.columns.validation.value.bodyIsEmpty",
               label : "deviceEvents.columns.validation.value.label",
            },
         },
         value : "deviceEvents.columns.value",
      },
      command : {
         clearEvents : "deviceEvents.command.clearEvents",
         close : "deviceEvents.command.close",
         customizeContentType : "deviceEvents.command.customizeContentType",
         fetch : "deviceEvents.command.fetch",
         refresh : "deviceEvents.command.refresh",
         showSystemProperties : {
            announce : {
               hide : "deviceEvents.command.showSystemProperties.announce.hide",
               show : "deviceEvents.command.showSystemProperties.announce.show",
            },
            label : "deviceEvents.command.showSystemProperties.label",
         },
         simulate : "deviceEvents.command.simulate",
         start : "deviceEvents.command.start",
         stop : "deviceEvents.command.stop",
      },
      consumerGroups : {
         label : "deviceEvents.consumerGroups.label",
         tooltip : "deviceEvents.consumerGroups.tooltip",
      },
      customEventHub : {
         connectionString : {
            error : "deviceEvents.customEventHub.connectionString.error",
            label : "deviceEvents.customEventHub.connectionString.label",
            placeHolder : "deviceEvents.customEventHub.connectionString.placeHolder",
         },
      },
      customizeContentType : {
         contentTypeOption : {
            label : "deviceEvents.customizeContentType.contentTypeOption.label",
         },
         header : "deviceEvents.customizeContentType.header",
         protobuf : {
            file : {
               label : "deviceEvents.customizeContentType.protobuf.file.label",
               removeFile : "deviceEvents.customizeContentType.protobuf.file.removeFile",
            },
            type : {
               label : "deviceEvents.customizeContentType.protobuf.type.label",
               placeholder : "deviceEvents.customizeContentType.protobuf.type.placeholder",
            },
         },
         save : "deviceEvents.customizeContentType.save",
      },
      error : "deviceEvents.error",
      event : {
         body : "deviceEvents.event.body",
         enqueuedTime : "deviceEvents.event.enqueuedTime",
         properties : "deviceEvents.event.properties",
      },
      headerText : "deviceEvents.headerText",
      infiniteScroll : {
         loading : "deviceEvents.infiniteScroll.loading",
      },
      interfaceDropDown : {
         label : "deviceEvents.interfaceDropDown.label",
         placeHolder : "deviceEvents.interfaceDropDown.placeHolder",
      },
      noEvent : "deviceEvents.noEvent",
      simulation : {
         advanced : {
            body : {
               label : "deviceEvents.simulation.advanced.body.label",
               tooltip : "deviceEvents.simulation.advanced.body.tooltip",
            },
            copyLabel : "deviceEvents.simulation.advanced.copyLabel",
            instruction : "deviceEvents.simulation.advanced.instruction",
            label : "deviceEvents.simulation.advanced.label",
            properties : {
               addProperty : "deviceEvents.simulation.advanced.properties.addProperty",
               delete : "deviceEvents.simulation.advanced.properties.delete",
               key : "deviceEvents.simulation.advanced.properties.key",
               keyDup : "deviceEvents.simulation.advanced.properties.keyDup",
               rowCheckBoxAriaLabel : "deviceEvents.simulation.advanced.properties.rowCheckBoxAriaLabel",
               selectAllCheckboxAriaLabel : "deviceEvents.simulation.advanced.properties.selectAllCheckboxAriaLabel",
               toggleSelectionColumnAriaLabel : "deviceEvents.simulation.advanced.properties.toggleSelectionColumnAriaLabel",
               value : "deviceEvents.simulation.advanced.properties.value",
            },
            tooltiop : "deviceEvents.simulation.advanced.tooltiop",
         },
         basic : {
            copyLabel : "deviceEvents.simulation.basic.copyLabel",
            instruction : "deviceEvents.simulation.basic.instruction",
            label : "deviceEvents.simulation.basic.label",
            tooltiop : "deviceEvents.simulation.basic.tooltiop",
         },
         cloudShell : {
            imageDescription : "deviceEvents.simulation.cloudShell.imageDescription",
            textDescription : "deviceEvents.simulation.cloudShell.textDescription",
         },
         header : "deviceEvents.simulation.header",
         prerequisite : {
            instruction : "deviceEvents.simulation.prerequisite.instruction",
            label : "deviceEvents.simulation.prerequisite.label",
            tooltiop : "deviceEvents.simulation.prerequisite.tooltiop",
         },
      },
      startTime : {
         error : "deviceEvents.startTime.error",
         label : "deviceEvents.startTime.label",
         tooltip : "deviceEvents.startTime.tooltip",
      },
      toggleShowRawData : {
         label : "deviceEvents.toggleShowRawData.label",
         off : "deviceEvents.toggleShowRawData.off",
         on : "deviceEvents.toggleShowRawData.on",
      },
      toggleSpecifyStartingTime : {
         label : "deviceEvents.toggleSpecifyStartingTime.label",
         off : "deviceEvents.toggleSpecifyStartingTime.off",
         on : "deviceEvents.toggleSpecifyStartingTime.on",
      },
      toggleUseDefaultEventHub : {
         label : "deviceEvents.toggleUseDefaultEventHub.label",
         off : "deviceEvents.toggleUseDefaultEventHub.off",
         on : "deviceEvents.toggleUseDefaultEventHub.on",
      },
      tooltip : "deviceEvents.tooltip",
   };
   public static deviceIdentity = {
      authenticationType : {
         ca : {
            connectionString : "deviceIdentity.authenticationType.ca.connectionString",
            connectionStringTooltip : "deviceIdentity.authenticationType.ca.connectionStringTooltip",
            text : "deviceIdentity.authenticationType.ca.text",
            type : "deviceIdentity.authenticationType.ca.type",
         },
         sasToken : {
            expiration : "deviceIdentity.authenticationType.sasToken.expiration",
            generateButton : {
               text : "deviceIdentity.authenticationType.sasToken.generateButton.text",
               title : "deviceIdentity.authenticationType.sasToken.generateButton.title",
            },
            label : "deviceIdentity.authenticationType.sasToken.label",
            symmetricKey : "deviceIdentity.authenticationType.sasToken.symmetricKey",
            textField : {
               ariaLabel : "deviceIdentity.authenticationType.sasToken.textField.ariaLabel",
               label : "deviceIdentity.authenticationType.sasToken.textField.label",
            },
            toolTip : "deviceIdentity.authenticationType.sasToken.toolTip",
         },
         selfSigned : {
            connectionString : "deviceIdentity.authenticationType.selfSigned.connectionString",
            connectionStringTooltip : "deviceIdentity.authenticationType.selfSigned.connectionStringTooltip",
            primaryThumbprint : "deviceIdentity.authenticationType.selfSigned.primaryThumbprint",
            primaryThumbprintTooltip : "deviceIdentity.authenticationType.selfSigned.primaryThumbprintTooltip",
            secondaryThumbprint : "deviceIdentity.authenticationType.selfSigned.secondaryThumbprint",
            secondaryThumbprintTooltip : "deviceIdentity.authenticationType.selfSigned.secondaryThumbprintTooltip",
            text : "deviceIdentity.authenticationType.selfSigned.text",
            type : "deviceIdentity.authenticationType.selfSigned.type",
         },
         symmetricKey : {
            autoGenerate : "deviceIdentity.authenticationType.symmetricKey.autoGenerate",
            generatePrimaryKey : "deviceIdentity.authenticationType.symmetricKey.generatePrimaryKey",
            generateSecondaryKey : "deviceIdentity.authenticationType.symmetricKey.generateSecondaryKey",
            primaryConnectionString : "deviceIdentity.authenticationType.symmetricKey.primaryConnectionString",
            primaryConnectionStringTooltip : "deviceIdentity.authenticationType.symmetricKey.primaryConnectionStringTooltip",
            primaryKey : "deviceIdentity.authenticationType.symmetricKey.primaryKey",
            primaryKeyTooltip : "deviceIdentity.authenticationType.symmetricKey.primaryKeyTooltip",
            secondaryConnectionString : "deviceIdentity.authenticationType.symmetricKey.secondaryConnectionString",
            secondaryConnectionStringTooltip : "deviceIdentity.authenticationType.symmetricKey.secondaryConnectionStringTooltip",
            secondaryKey : "deviceIdentity.authenticationType.symmetricKey.secondaryKey",
            secondaryKeyTooltip : "deviceIdentity.authenticationType.symmetricKey.secondaryKeyTooltip",
            type : "deviceIdentity.authenticationType.symmetricKey.type",
         },
         text : "deviceIdentity.authenticationType.text",
      },
      commands : {
         manageKeys : {
            ariaLabel : "deviceIdentity.commands.manageKeys.ariaLabel",
            label : "deviceIdentity.commands.manageKeys.label",
         },
         regeneratePrimary : {
            ariaLabel : "deviceIdentity.commands.regeneratePrimary.ariaLabel",
            generated : "deviceIdentity.commands.regeneratePrimary.generated",
            label : "deviceIdentity.commands.regeneratePrimary.label",
         },
         regenerateSecondary : {
            ariaLabel : "deviceIdentity.commands.regenerateSecondary.ariaLabel",
            generated : "deviceIdentity.commands.regenerateSecondary.generated",
            label : "deviceIdentity.commands.regenerateSecondary.label",
         },
         save : "deviceIdentity.commands.save",
         swapKeys : {
            ariaLabel : "deviceIdentity.commands.swapKeys.ariaLabel",
            label : "deviceIdentity.commands.swapKeys.label",
            swapped : "deviceIdentity.commands.swapKeys.swapped",
         },
      },
      deviceID : "deviceIdentity.deviceID",
      deviceIDTooltip : "deviceIdentity.deviceIDTooltip",
      headerText : "deviceIdentity.headerText",
      hubConnectivity : {
         disable : "deviceIdentity.hubConnectivity.disable",
         disabled : "deviceIdentity.hubConnectivity.disabled",
         enable : "deviceIdentity.hubConnectivity.enable",
         enabled : "deviceIdentity.hubConnectivity.enabled",
         label : "deviceIdentity.hubConnectivity.label",
         tooltip : "deviceIdentity.hubConnectivity.tooltip",
      },
      qrCode : {
         callToAction : "deviceIdentity.qrCode.callToAction",
         headerText : "deviceIdentity.qrCode.headerText",
         label : "deviceIdentity.qrCode.label",
         toolTip : "deviceIdentity.qrCode.toolTip",
      },
      validation : {
         invalidDeviceId : "deviceIdentity.validation.invalidDeviceId",
         invalidKey : "deviceIdentity.validation.invalidKey",
         invalidThumbprint : "deviceIdentity.validation.invalidThumbprint",
      },
   };
   public static deviceInterfaces = {
      columns : {
         description : "deviceInterfaces.columns.description",
         displayName : "deviceInterfaces.columns.displayName",
         id : "deviceInterfaces.columns.id",
         noSource : "deviceInterfaces.columns.noSource",
         source : "deviceInterfaces.columns.source",
      },
      command : {
         close : "deviceInterfaces.command.close",
         configure : "deviceInterfaces.command.configure",
         refresh : "deviceInterfaces.command.refresh",
      },
      headerText : "deviceInterfaces.headerText",
      interfaceListFailedToRender : "deviceInterfaces.interfaceListFailedToRender",
      interfaceNotFound : "deviceInterfaces.interfaceNotFound",
      interfaceNotValid : "deviceInterfaces.interfaceNotValid",
      noInterfaces : "deviceInterfaces.noInterfaces",
   };
   public static deviceLists = {
      columns : {
         authenticationType : "deviceLists.columns.authenticationType",
         cloudToDeviceMessageCount : "deviceLists.columns.cloudToDeviceMessageCount",
         connection : "deviceLists.columns.connection",
         deviceId : {
            infoText : "deviceLists.columns.deviceId.infoText",
            label : "deviceLists.columns.deviceId.label",
         },
         interfaces : "deviceLists.columns.interfaces",
         isEdgeDevice : {
            label : "deviceLists.columns.isEdgeDevice.label",
            no : "deviceLists.columns.isEdgeDevice.no",
            yes : "deviceLists.columns.isEdgeDevice.yes",
         },
         isPnpDevice : "deviceLists.columns.isPnpDevice",
         lastActivityTime : "deviceLists.columns.lastActivityTime",
         status : {
            infoText : "deviceLists.columns.status.infoText",
            label : "deviceLists.columns.status.label",
         },
         statusUpdatedTime : "deviceLists.columns.statusUpdatedTime",
      },
      commands : {
         add : "deviceLists.commands.add",
         close : "deviceLists.commands.close",
         delete : {
            buttonText : "deviceLists.commands.delete.buttonText",
            confirmationDialog : {
               cancel : "deviceLists.commands.delete.confirmationDialog.cancel",
               confirm : "deviceLists.commands.delete.confirmationDialog.confirm",
               subText : "deviceLists.commands.delete.confirmationDialog.subText",
               title : "deviceLists.commands.delete.confirmationDialog.title",
            },
         },
         refresh : "deviceLists.commands.refresh",
         save : "deviceLists.commands.save",
      },
      loadingDevice : "deviceLists.loadingDevice",
      messageBar : {
         link : "deviceLists.messageBar.link",
         message : "deviceLists.messageBar.message",
      },
      noData : "deviceLists.noData",
      noDevice : "deviceLists.noDevice",
      paging : {
         pages : "deviceLists.paging.pages",
      },
      query : {
         deviceId : {
            ariaLabel : "deviceLists.query.deviceId.ariaLabel",
            placeholder : "deviceLists.query.deviceId.placeholder",
            searchButton : {
               ariaLabel : "deviceLists.query.deviceId.searchButton.ariaLabel",
               title : "deviceLists.query.deviceId.searchButton.title",
            },
         },
         searchPills : {
            add : {
               ariaLabel : "deviceLists.query.searchPills.add.ariaLabel",
               text : "deviceLists.query.searchPills.add.text",
            },
            clause : {
               operationType : {
                  ariaLabel : "deviceLists.query.searchPills.clause.operationType.ariaLabel",
                  options : {
                     equals : "deviceLists.query.searchPills.clause.operationType.options.equals",
                     notEquals : "deviceLists.query.searchPills.clause.operationType.options.notEquals",
                  },
                  title : "deviceLists.query.searchPills.clause.operationType.title",
               },
               parameterType : {
                  ariaLabel : "deviceLists.query.searchPills.clause.parameterType.ariaLabel",
                  items : {
                     edge : "deviceLists.query.searchPills.clause.parameterType.items.edge",
                     lastActivityTime : "deviceLists.query.searchPills.clause.parameterType.items.lastActivityTime",
                     propertyValue : "deviceLists.query.searchPills.clause.parameterType.items.propertyValue",
                     status : "deviceLists.query.searchPills.clause.parameterType.items.status",
                     statusUpdateTime : "deviceLists.query.searchPills.clause.parameterType.items.statusUpdateTime",
                  },
                  placeholder : "deviceLists.query.searchPills.clause.parameterType.placeholder",
               },
               remove : {
                  ariaLabel : "deviceLists.query.searchPills.clause.remove.ariaLabel",
                  title : "deviceLists.query.searchPills.clause.remove.title",
               },
               value : {
                  ariaLabel : "deviceLists.query.searchPills.clause.value.ariaLabel",
                  deviceCapability : {
                     edge : "deviceLists.query.searchPills.clause.value.deviceCapability.edge",
                     nonEdge : "deviceLists.query.searchPills.clause.value.deviceCapability.nonEdge",
                  },
                  deviceStatus : {
                     disabled : "deviceLists.query.searchPills.clause.value.deviceStatus.disabled",
                     enabled : "deviceLists.query.searchPills.clause.value.deviceStatus.enabled",
                  },
                  placeholder : "deviceLists.query.searchPills.clause.value.placeholder",
               },
            },
            search : {
               ariaLabel : "deviceLists.query.searchPills.search.ariaLabel",
               text : "deviceLists.query.searchPills.search.text",
            },
         },
      },
   };
   public static deviceProperties = {
      columns : {
         error : "deviceProperties.columns.error",
         name : "deviceProperties.columns.name",
         schema : "deviceProperties.columns.schema",
         unit : "deviceProperties.columns.unit",
         value : "deviceProperties.columns.value",
      },
      command : {
         close : "deviceProperties.command.close",
         openReportedValuePanel : "deviceProperties.command.openReportedValuePanel",
         refresh : "deviceProperties.command.refresh",
      },
      editor : {
         label : "deviceProperties.editor.label",
      },
      headerText : "deviceProperties.headerText",
      noProperties : "deviceProperties.noProperties",
   };
   public static deviceSettings = {
      ackStatus : {
         code : "deviceSettings.ackStatus.code",
         description : "deviceSettings.ackStatus.description",
         version : "deviceSettings.ackStatus.version",
      },
      columns : {
         error : "deviceSettings.columns.error",
         name : "deviceSettings.columns.name",
         reportedValue : "deviceSettings.columns.reportedValue",
         reportedValueTooltip : "deviceSettings.columns.reportedValueTooltip",
         schema : "deviceSettings.columns.schema",
         unit : "deviceSettings.columns.unit",
      },
      command : {
         close : "deviceSettings.command.close",
         collapse : "deviceSettings.command.collapse",
         collapseAll : "deviceSettings.command.collapseAll",
         expand : "deviceSettings.command.expand",
         expandAll : "deviceSettings.command.expandAll",
         openDesiredValuePanel : "deviceSettings.command.openDesiredValuePanel",
         openReportedValuePanel : "deviceSettings.command.openReportedValuePanel",
         refresh : "deviceSettings.command.refresh",
         submit : "deviceSettings.command.submit",
      },
      headerText : "deviceSettings.headerText",
      noSettings : "deviceSettings.noSettings",
      panel : {
         title : "deviceSettings.panel.title",
      },
   };
   public static deviceTwin = {
      command : {
         refresh : "deviceTwin.command.refresh",
         save : "deviceTwin.command.save",
      },
      headerText : "deviceTwin.headerText",
      notFound : "deviceTwin.notFound",
      tooltip : "deviceTwin.tooltip",
   };
   public static digitalTwin = {
      componentName : "digitalTwin.componentName",
      headerText : "digitalTwin.headerText",
      interfaceId : "digitalTwin.interfaceId",
      modelContainsNoComponents : "digitalTwin.modelContainsNoComponents",
      modelId : "digitalTwin.modelId",
      pivot : {
         ariaLabel : "digitalTwin.pivot.ariaLabel",
         components : "digitalTwin.pivot.components",
         content : "digitalTwin.pivot.content",
         defaultComponent : "digitalTwin.pivot.defaultComponent",
         digitalTwin : "digitalTwin.pivot.digitalTwin",
      },
      steps : {
         explanation : "digitalTwin.steps.explanation",
         first : "digitalTwin.steps.first",
         firstModule : "digitalTwin.steps.firstModule",
         secondFailure : "digitalTwin.steps.secondFailure",
         secondSuccess : "digitalTwin.steps.secondSuccess",
         third : "digitalTwin.steps.third",
         zero : "digitalTwin.steps.zero",
         zeroModule : "digitalTwin.steps.zeroModule",
      },
   };
   public static directMethod = {
      connectionTimeout : "directMethod.connectionTimeout",
      connectionTimeoutTooltip : "directMethod.connectionTimeoutTooltip",
      headerText : "directMethod.headerText",
      invokeMethodButtonText : "directMethod.invokeMethodButtonText",
      methodName : "directMethod.methodName",
      methodNamePlaceHolder : "directMethod.methodNamePlaceHolder",
      payload : "directMethod.payload",
      payloadTooltip : "directMethod.payloadTooltip",
      responseTimeout : "directMethod.responseTimeout",
      responseTimeoutTooltip : "directMethod.responseTimeoutTooltip",
      result : "directMethod.result",
      tooltip : "directMethod.tooltip",
   };
   public static errorBoundary = {
      text : "errorBoundary.text",
   };
   public static header = {
      applicationName : "header.applicationName",
      notifications : {
         copy : "header.notifications.copy",
         dismiss : "header.notifications.dismiss",
         panel : {
            noNotifications : "header.notifications.panel.noNotifications",
            redirect : "header.notifications.panel.redirect",
            redirectLink : "header.notifications.panel.redirectLink",
            title : "header.notifications.panel.title",
         },
         show : "header.notifications.show",
         title : "header.notifications.title",
      },
      questions : {
         launch : "header.questions.launch",
      },
      search : {
         watermark : "header.search.watermark",
      },
      settings : {
         launch : "header.settings.launch",
      },
   };
   public static modelRepository = {
      commands : {
         add : {
            ariaLabel : "modelRepository.commands.add.ariaLabel",
            label : "modelRepository.commands.add.label",
         },
         addConfigurableRepoSource : {
            ariaLabel : "modelRepository.commands.addConfigurableRepoSource.ariaLabel",
            label : "modelRepository.commands.addConfigurableRepoSource.label",
         },
         addLocalDMRSource : {
            ariaLabel : "modelRepository.commands.addLocalDMRSource.ariaLabel",
            label : "modelRepository.commands.addLocalDMRSource.label",
         },
         addLocalSource : {
            ariaLabel : "modelRepository.commands.addLocalSource.ariaLabel",
            label : "modelRepository.commands.addLocalSource.label",
         },
         addPublicSource : {
            ariaLabel : "modelRepository.commands.addPublicSource.ariaLabel",
            label : "modelRepository.commands.addPublicSource.label",
         },
         back : {
            ariaLabel : "modelRepository.commands.back.ariaLabel",
            label : "modelRepository.commands.back.label",
         },
         help : {
            ariaLabel : "modelRepository.commands.help.ariaLabel",
            label : "modelRepository.commands.help.label",
         },
         remove : {
            ariaLabel : "modelRepository.commands.remove.ariaLabel",
            label : "modelRepository.commands.remove.label",
         },
         revert : {
            ariaLabel : "modelRepository.commands.revert.ariaLabel",
            label : "modelRepository.commands.revert.label",
         },
         save : {
            ariaLabel : "modelRepository.commands.save.ariaLabel",
            label : "modelRepository.commands.save.label",
         },
      },
      description : {
         description : "modelRepository.description.description",
         header : "modelRepository.description.header",
         help : "modelRepository.description.help",
      },
      instruction : "modelRepository.instruction",
      types : {
         configurable : {
            infoText : "modelRepository.types.configurable.infoText",
            label : "modelRepository.types.configurable.label",
            textBoxLabel : "modelRepository.types.configurable.textBoxLabel",
         },
         dmr : {
            infoText : "modelRepository.types.dmr.infoText",
            label : "modelRepository.types.dmr.label",
         },
         local : {
            folderPicker : {
               command : {
                  cancel : "modelRepository.types.local.folderPicker.command.cancel",
                  navigateToParent : "modelRepository.types.local.folderPicker.command.navigateToParent",
                  openPicker : "modelRepository.types.local.folderPicker.command.openPicker",
                  select : "modelRepository.types.local.folderPicker.command.select",
               },
               dialog : {
                  error : "modelRepository.types.local.folderPicker.dialog.error",
                  noFolderFoundText : "modelRepository.types.local.folderPicker.dialog.noFolderFoundText",
                  subText : "modelRepository.types.local.folderPicker.dialog.subText",
                  title : "modelRepository.types.local.folderPicker.dialog.title",
               },
            },
            infoText : "modelRepository.types.local.infoText",
            label : "modelRepository.types.local.label",
            textBoxLabel : "modelRepository.types.local.textBoxLabel",
         },
         mandatory : "modelRepository.types.mandatory",
         notAvailable : "modelRepository.types.notAvailable",
         public : {
            infoText : "modelRepository.types.public.infoText",
            label : "modelRepository.types.public.label",
         },
      },
   };
   public static moduleIdentity = {
      addModuleHeaderText : "moduleIdentity.addModuleHeaderText",
      authenticationType : {
         ca : {
            text : "moduleIdentity.authenticationType.ca.text",
            type : "moduleIdentity.authenticationType.ca.type",
         },
         selfSigned : {
            primaryThumbprint : "moduleIdentity.authenticationType.selfSigned.primaryThumbprint",
            primaryThumbprintTooltip : "moduleIdentity.authenticationType.selfSigned.primaryThumbprintTooltip",
            secondaryThumbprint : "moduleIdentity.authenticationType.selfSigned.secondaryThumbprint",
            secondaryThumbprintTooltip : "moduleIdentity.authenticationType.selfSigned.secondaryThumbprintTooltip",
            text : "moduleIdentity.authenticationType.selfSigned.text",
            type : "moduleIdentity.authenticationType.selfSigned.type",
         },
         symmetricKey : {
            autoGenerate : "moduleIdentity.authenticationType.symmetricKey.autoGenerate",
            generatePrimaryKey : "moduleIdentity.authenticationType.symmetricKey.generatePrimaryKey",
            generateSecondaryKey : "moduleIdentity.authenticationType.symmetricKey.generateSecondaryKey",
            primaryConnectionString : "moduleIdentity.authenticationType.symmetricKey.primaryConnectionString",
            primaryKey : "moduleIdentity.authenticationType.symmetricKey.primaryKey",
            primaryKeyTooltip : "moduleIdentity.authenticationType.symmetricKey.primaryKeyTooltip",
            secondaryConnectionString : "moduleIdentity.authenticationType.symmetricKey.secondaryConnectionString",
            secondaryKey : "moduleIdentity.authenticationType.symmetricKey.secondaryKey",
            secondaryKeyTooltip : "moduleIdentity.authenticationType.symmetricKey.secondaryKeyTooltip",
            type : "moduleIdentity.authenticationType.symmetricKey.type",
         },
         text : "moduleIdentity.authenticationType.text",
      },
      columns : {
         connectionState : "moduleIdentity.columns.connectionState",
         connectionStateLastUpdated : "moduleIdentity.columns.connectionStateLastUpdated",
         lastActivityTime : "moduleIdentity.columns.lastActivityTime",
         modelId : "moduleIdentity.columns.modelId",
         moduleId : "moduleIdentity.columns.moduleId",
      },
      command : {
         add : "moduleIdentity.command.add",
         cancel : "moduleIdentity.command.cancel",
         refresh : "moduleIdentity.command.refresh",
         save : "moduleIdentity.command.save",
      },
      detail : {
         command : {
            back : "moduleIdentity.detail.command.back",
            delete : "moduleIdentity.detail.command.delete",
            refresh : "moduleIdentity.detail.command.refresh",
            save : "moduleIdentity.detail.command.save",
         },
         deleteConfirmation : "moduleIdentity.detail.deleteConfirmation",
         headerText : "moduleIdentity.detail.headerText",
         twin : "moduleIdentity.detail.twin",
      },
      errorFetching : "moduleIdentity.errorFetching",
      headerText : "moduleIdentity.headerText",
      link : "moduleIdentity.link",
      moduleId : "moduleIdentity.moduleId",
      moduleIdTooltip : "moduleIdentity.moduleIdTooltip",
      noModules : "moduleIdentity.noModules",
      tooltip : "moduleIdentity.tooltip",
      validation : {
         invalidKey : "moduleIdentity.validation.invalidKey",
         invalidModuleIdentityName : "moduleIdentity.validation.invalidModuleIdentityName",
         invalidThumbprint : "moduleIdentity.validation.invalidThumbprint",
      },
   };
   public static noMatchError = {
      description : "noMatchError.description",
      goHome : "noMatchError.goHome",
      title : "noMatchError.title",
   };
   public static notifications = {
      addDeviceOnError : "notifications.addDeviceOnError",
      addDeviceOnSucceed : "notifications.addDeviceOnSucceed",
      addModuleIdentityOnError : "notifications.addModuleIdentityOnError",
      addModuleIdentityOnSucceed : "notifications.addModuleIdentityOnSucceed",
      cloudToDeviceMessageOnError : "notifications.cloudToDeviceMessageOnError",
      cloudToDeviceMessageOnSuccess : "notifications.cloudToDeviceMessageOnSuccess",
      connectionStringsWithExpiryRemovalWarning : "notifications.connectionStringsWithExpiryRemovalWarning",
      connectionStringsWithoutExpiryRemovalWarning : "notifications.connectionStringsWithoutExpiryRemovalWarning",
      deleteDeviceOnError : "notifications.deleteDeviceOnError",
      deleteDeviceOnSucceed : "notifications.deleteDeviceOnSucceed",
      deleteModuleIdentityOnError : "notifications.deleteModuleIdentityOnError",
      deleteModuleIdentityOnSuccess : "notifications.deleteModuleIdentityOnSuccess",
      getDeviceIdentityOnError : "notifications.getDeviceIdentityOnError",
      getDeviceListGenericErrorHelp : "notifications.getDeviceListGenericErrorHelp",
      getDeviceListOnError : "notifications.getDeviceListOnError",
      getDeviceTwinOnError : "notifications.getDeviceTwinOnError",
      getDigitalTwinOnError : "notifications.getDigitalTwinOnError",
      getInterfaceModelOnError : "notifications.getInterfaceModelOnError",
      getModuleIdentitiesOnError : "notifications.getModuleIdentitiesOnError",
      getModuleIdentityOnError : "notifications.getModuleIdentityOnError",
      getModuleIdentityTwinOnError : "notifications.getModuleIdentityTwinOnError",
      interfaceSchemaNotSupported : "notifications.interfaceSchemaNotSupported",
      invokeDigitalTwinCommandOnError : "notifications.invokeDigitalTwinCommandOnError",
      invokeDigitalTwinCommandOnSuccess : "notifications.invokeDigitalTwinCommandOnSuccess",
      invokeDigitalTwinCommandOnSuccessButResponseIsNotValid : "notifications.invokeDigitalTwinCommandOnSuccessButResponseIsNotValid",
      invokeMethodOnError : "notifications.invokeMethodOnError",
      invokeMethodOnSuccess : "notifications.invokeMethodOnSuccess",
      invokeModuleMethodOnError : "notifications.invokeModuleMethodOnError",
      invokeModuleMethodOnSuccess : "notifications.invokeModuleMethodOnSuccess",
      invokingDigitalTwinCommand : "notifications.invokingDigitalTwinCommand",
      invokingDigitalTwinCommandWithPayload : "notifications.invokingDigitalTwinCommandWithPayload",
      invokingMethodWithPayload : "notifications.invokingMethodWithPayload",
      invokingModuleMethodWithPayload : "notifications.invokingModuleMethodWithPayload",
      modelRepositorySettingsUpdated : "notifications.modelRepositorySettingsUpdated",
      parseLocalInterfaceModelOnError : "notifications.parseLocalInterfaceModelOnError",
      patchDigitalTwinOnAccept : "notifications.patchDigitalTwinOnAccept",
      patchDigitalTwinOnError : "notifications.patchDigitalTwinOnError",
      patchDigitalTwinOnSuccess : "notifications.patchDigitalTwinOnSuccess",
      portIsInUseError : "notifications.portIsInUseError",
      savedToIotHubConnectionString : "notifications.savedToIotHubConnectionString",
      sendingCloudToDeviceMessage : "notifications.sendingCloudToDeviceMessage",
      startEventMonitoringOnError : "notifications.startEventMonitoringOnError",
      stopEventMonitoringOnError : "notifications.stopEventMonitoringOnError",
      updateCustomDecoderOnError : "notifications.updateCustomDecoderOnError",
      updateDeviceOnError : "notifications.updateDeviceOnError",
      updateDeviceOnSucceed : "notifications.updateDeviceOnSucceed",
      updateDeviceTwinOnError : "notifications.updateDeviceTwinOnError",
      updateDeviceTwinOnSuccess : "notifications.updateDeviceTwinOnSuccess",
      updateModuleIdentityTwinOnError : "notifications.updateModuleIdentityTwinOnError",
      updateModuleIdentityTwinOnSuccess : "notifications.updateModuleIdentityTwinOnSuccess",
   };
   public static resizableDetailsList = {
      buttons : {
         cancel : "resizableDetailsList.buttons.cancel",
         resize : "resizableDetailsList.buttons.resize",
      },
      content : {
         closeButtonAriaLabel : "resizableDetailsList.content.closeButtonAriaLabel",
         subText : "resizableDetailsList.content.subText",
         title : "resizableDetailsList.content.title",
      },
   };
   public static settings = {
      close : "settings.close",
      configuration : {
         headerText : "settings.configuration.headerText",
         redirect : "settings.configuration.redirect",
         redirectLink : "settings.configuration.redirectLink",
      },
      confirmationMessage : "settings.confirmationMessage",
      footerText : "settings.footerText",
      headerText : "settings.headerText",
      modelDefinitions : {
         headerText : "settings.modelDefinitions.headerText",
         redirect : "settings.modelDefinitions.redirect",
         redirectLink : "settings.modelDefinitions.redirectLink",
      },
      questions : {
         headerText : "settings.questions.headerText",
         questions : {
            documentation : {
               link : "settings.questions.questions.documentation.link",
               text : "settings.questions.questions.documentation.text",
            },
            privacy : {
               link : "settings.questions.questions.privacy.link",
               linkText : "settings.questions.questions.privacy.linkText",
               text : "settings.questions.questions.privacy.text",
            },
         },
      },
      save : "settings.save",
      theme : {
         darkTheme : "settings.theme.darkTheme",
         headerText : "settings.theme.headerText",
         label : "settings.theme.label",
         lightTheme : "settings.theme.lightTheme",
      },
   };
   public static template = {
      array : {
         add : "template.array.add",
         remove : "template.array.remove",
      },
      collapse : {
         close : "template.collapse.close",
         open : "template.collapse.open",
      },
   };
}
/* tslint:enable */

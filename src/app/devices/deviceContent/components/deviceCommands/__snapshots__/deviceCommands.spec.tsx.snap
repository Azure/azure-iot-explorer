// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`components/devices/deviceCommands matches snapshot while interface cannot be found 1`] = `
<Fragment>
  <StyledCommandBarBase
    className="command"
    items={
      Array [
        Object {
          "ariaLabel": "deviceSettings.command.refresh",
          "iconProps": Object {
            "iconName": "Refresh",
          },
          "key": "Refresh",
          "name": "deviceSettings.command.refresh",
          "onClick": [Function],
        },
      ]
    }
  />
  <Component
    headerText="deviceCommands.headerText"
  />
  <Connect(InterfaceNotFoundMessageBox) />
</Fragment>
`;

exports[`components/devices/deviceCommands matches snapshot with a commandSchema 1`] = `
<Fragment>
  <StyledCommandBarBase
    className="command"
    items={
      Array [
        Object {
          "ariaLabel": "deviceSettings.command.refresh",
          "iconProps": Object {
            "iconName": "Refresh",
          },
          "key": "Refresh",
          "name": "deviceSettings.command.refresh",
          "onClick": [Function],
        },
      ]
    }
  />
  <Component
    headerText="deviceCommands.headerText"
  />
  <DeviceCommandsPerInterface
    commandSchemas={
      Array [
        Object {
          "commandModelDefinition": Object {
            "@type": "Command",
            "name": "command1",
          },
          "parsedSchema": Object {
            "description": "command1 description",
            "name": "command1",
          },
        },
      ]
    }
    deviceId={null}
    history={
      Object {
        "location": Object {
          "pathname": "/#/devices/detail/digitalTwins/commands/?id=device1&interfaceId=urn:iotInterfaces:com:interface1:1",
        },
      }
    }
    interfaceName="interface1"
    invokeDigitalTwinInterfaceCommand={[MockFunction]}
    isLoading={false}
    location={
      Object {
        "pathname": "/#/devices/detail/digitalTwins/commands/?id=device1&interfaceId=urn:iotInterfaces:com:interface1:1",
      }
    }
    match={Object {}}
    refresh={[MockFunction]}
    setInterfaceId={
      [MockFunction] {
        "calls": Array [
          Array [
            null,
          ],
          Array [
            null,
          ],
          Array [
            null,
          ],
          Array [
            null,
          ],
        ],
        "results": Array [
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
          Object {
            "type": "return",
            "value": undefined,
          },
        ],
      }
    }
  />
</Fragment>
`;

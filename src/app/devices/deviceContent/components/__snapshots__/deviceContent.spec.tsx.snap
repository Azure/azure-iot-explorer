// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`deviceContent matches snapshot 1`] = `
<div
  className="edit"
>
  <div
    className="view-header"
  >
    <Route
      component={[Function]}
    />
  </div>
  <div
    className="view-content view-scroll"
  >
    <div
      className="device-content"
    >
      <div
        className="device-content-nav-bar"
      >
        <nav>
          <div
            className="navToggle"
          >
            <CustomizedIconButton
              ariaLabel="deviceContent.navBar.collapse"
              iconProps={
                Object {
                  "iconName": "GlobalNavButton",
                }
              }
              onClick={[Function]}
              tabIndex={0}
              title="deviceContent.navBar.collapse"
            />
          </div>
          <div
            className="nav-links"
          >
            <DeviceContentNavComponent
              deviceId="testDevice"
              getDeviceIdentity={
                [MockFunction] {
                  "calls": Array [
                    Array [
                      "testDevice",
                    ],
                  ],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": undefined,
                    },
                  ],
                }
              }
              getDigitalTwinInterfaceProperties={
                [MockFunction] {
                  "calls": Array [
                    Array [
                      "testDevice",
                    ],
                  ],
                  "results": Array [
                    Object {
                      "type": "return",
                      "value": undefined,
                    },
                  ],
                }
              }
              history={
                Object {
                  "location": Object {
                    "pathname": "/#/devices/detail/?id=testDevice",
                  },
                }
              }
              identityWrapper={null}
              interfaceId="testInterfaceId"
              interfaceIds={Array []}
              isEdgeDevice={null}
              isLoading={false}
              isPnPDevice={true}
              location={
                Object {
                  "pathname": "/#/devices/detail/?id=testDevice",
                }
              }
              match={Object {}}
              selectedInterface="testInterfaceId"
              setInterfaceId={[MockFunction]}
            />
          </div>
        </nav>
      </div>
      <div
        className="device-content-detail"
      >
        <Route
          component={[Function]}
          path="undefined/identity/"
        />
        <Route
          component={[Function]}
          path="undefined/twin/"
        />
        <Route
          component={[Function]}
          path="undefined/events/"
        />
        <Route
          component={[Function]}
          path="undefined/methods/"
        />
        <Route
          component={[Function]}
          path="undefined/cloudToDeviceMessage/"
        />
        <Route
          component={[Function]}
          path="undefined/moduleIdentity/"
        />
        <Route
          component={[Function]}
          path="undefined/addModuleIdentity/"
        />
        <Route
          component={[Function]}
          path="undefined/digitalTwins/"
        />
      </div>
    </div>
  </div>
</div>
`;

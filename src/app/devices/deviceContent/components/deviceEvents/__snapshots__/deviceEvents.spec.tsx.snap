// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`components/devices/deviceEvents matches snapshot in electron 1`] = `
<div
  className="device-events"
  key="device-events"
>
  <StyledCommandBarBase
    className="command"
    items={
      Array [
        Object {
          "ariaLabel": "deviceEvents.command.start",
          "disabled": false,
          "iconProps": Object {
            "iconName": "Play",
          },
          "key": "Play",
          "name": "deviceEvents.command.start",
          "onClick": [Function],
        },
        Object {
          "ariaLabel": "deviceEvents.command.clearEvents",
          "disabled": true,
          "iconProps": Object {
            "iconName": "Clear",
          },
          "key": "Clear",
          "name": "deviceEvents.command.clearEvents",
          "onClick": [Function],
        },
        Object {
          "ariaLabel": "deviceEvents.command.showSystemProperties",
          "disabled": false,
          "iconProps": Object {
            "iconName": "Checkbox",
          },
          "key": "CheckboxComposite",
          "name": "deviceEvents.command.showSystemProperties",
          "onClick": [Function],
        },
      ]
    }
  />
  <Stack
    horizontal={true}
  >
    <StackItem
      align="start"
    >
      <h3>
         
        deviceEvents.headerText
      </h3>
    </StackItem>
    <StackItem
      align="center"
    >
      <StyledTooltipHostBase
        content="deviceEvents.tooltip"
        directionalHint={12}
        id="deviceEvents.tooltip"
      >
        <CustomizedIconButton
          aria-labelledby="tooltip1"
          iconProps={
            Object {
              "iconName": "info",
            }
          }
        />
      </StyledTooltipHostBase>
    </StackItem>
  </Stack>
  <StyledTextFieldBase
    ariaLabel="deviceEvents.consumerGroups.label"
    className="consumer-group-text-field"
    disabled={false}
    label="deviceEvents.consumerGroups.label"
    onChange={[Function]}
    onRenderLabel={[Function]}
    underlined={true}
    value="$Default"
  />
  <InfiniteScroll
    className="device-events-container"
    element="div"
    getScrollParent={null}
    hasMore={false}
    initialLoad={true}
    isReverse={true}
    key="scroll"
    loadMore={[Function]}
    loader={
      <div
        className="events-loader"
      >
        <StyledSpinnerBase />
        <h4>
          deviceEvents.infiniteScroll.loading
        </h4>
      </div>
    }
    pageStart={0}
    ref={null}
    role="main"
    threshold={250}
    useCapture={false}
    useWindow={true}
  >
    <div
      className="scrollable-sm"
    />
  </InfiniteScroll>
</div>
`;

exports[`components/devices/deviceEvents matches snapshot in hosted environment 1`] = `
<div
  className="device-events"
  key="device-events"
>
  <StyledCommandBarBase
    className="command"
    items={
      Array [
        Object {
          "ariaLabel": "deviceEvents.command.fetch",
          "disabled": false,
          "iconProps": Object {
            "iconName": "Play",
          },
          "key": "Play",
          "name": "deviceEvents.command.fetch",
          "onClick": [Function],
        },
        Object {
          "ariaLabel": "deviceEvents.command.clearEvents",
          "disabled": true,
          "iconProps": Object {
            "iconName": "Clear",
          },
          "key": "Clear",
          "name": "deviceEvents.command.clearEvents",
          "onClick": [Function],
        },
        Object {
          "ariaLabel": "deviceEvents.command.showSystemProperties",
          "disabled": false,
          "iconProps": Object {
            "iconName": "Checkbox",
          },
          "key": "CheckboxComposite",
          "name": "deviceEvents.command.showSystemProperties",
          "onClick": [Function],
        },
      ]
    }
  />
  <Stack
    horizontal={true}
  >
    <StackItem
      align="start"
    >
      <h3>
         
        deviceEvents.headerText
      </h3>
    </StackItem>
    <StackItem
      align="center"
    >
      <StyledTooltipHostBase
        content="deviceEvents.tooltip"
        directionalHint={12}
        id="deviceEvents.tooltip"
      >
        <CustomizedIconButton
          aria-labelledby="tooltip2"
          iconProps={
            Object {
              "iconName": "info",
            }
          }
        />
      </StyledTooltipHostBase>
    </StackItem>
  </Stack>
  <StyledTextFieldBase
    ariaLabel="deviceEvents.consumerGroups.label"
    className="consumer-group-text-field"
    disabled={false}
    label="deviceEvents.consumerGroups.label"
    onChange={[Function]}
    onRenderLabel={[Function]}
    underlined={true}
    value="$Default"
  />
  <InfiniteScroll
    className="device-events-container"
    element="div"
    getScrollParent={null}
    hasMore={false}
    initialLoad={true}
    isReverse={true}
    key="scroll"
    loadMore={[Function]}
    loader={
      <div
        className="events-loader"
      >
        <StyledSpinnerBase />
        <h4>
          deviceEvents.infiniteScroll.loading
        </h4>
      </div>
    }
    pageStart={0}
    ref={null}
    role="main"
    threshold={250}
    useCapture={false}
    useWindow={true}
  >
    <div
      className="scrollable-sm"
    />
  </InfiniteScroll>
</div>
`;

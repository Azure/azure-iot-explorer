// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`components/devices/deviceEventsPerInterface matches snapshot while interface cannot be found 1`] = `
<div
  className="device-events"
  key="device-events"
>
  <StyledCommandBarBase
    className="command"
    farItems={
      Array [
        Object {
          "ariaLabel": "deviceEvents.command.close",
          "iconProps": Object {
            "iconName": "NavigateBack",
          },
          "key": "NavigateBack",
          "name": "deviceEvents.command.close",
          "onClick": [Function],
        },
      ]
    }
    items={
      Array [
        Object {
          "ariaLabel": "deviceEvents.command.fetch",
          "disabled": false,
          "iconProps": Object {
            "iconName": "Play",
          },
          "key": "Play",
          "name": "deviceEvents.command.fetch",
          "onClick": [Function],
        },
        Object {
          "ariaLabel": "deviceEvents.command.refresh",
          "disabled": false,
          "iconProps": Object {
            "iconName": "Refresh",
          },
          "key": "Refresh",
          "name": "deviceEvents.command.refresh",
          "onClick": [Function],
        },
        Object {
          "ariaLabel": "deviceEvents.command.clearEvents",
          "disabled": true,
          "iconProps": Object {
            "iconName": "Delete",
          },
          "key": "Delete",
          "name": "deviceEvents.command.clearEvents",
          "onClick": [Function],
        },
      ]
    }
  />
  <Route
    component={[Function]}
  />
  <Connect(InterfaceNotFoundMessageBox) />
</div>
`;

exports[`components/devices/deviceEventsPerInterface matches snapshot while interface definition is retrieved in electron 1`] = `
<div
  className="device-events"
  key="device-events"
>
  <StyledCommandBarBase
    className="command"
    farItems={
      Array [
        Object {
          "ariaLabel": "deviceEvents.command.close",
          "iconProps": Object {
            "iconName": "NavigateBack",
          },
          "key": "NavigateBack",
          "name": "deviceEvents.command.close",
          "onClick": [Function],
        },
      ]
    }
    items={
      Array [
        Object {
          "ariaLabel": "deviceEvents.command.start",
          "disabled": false,
          "iconProps": Object {
            "iconName": "Play",
          },
          "key": "Play",
          "name": "deviceEvents.command.start",
          "onClick": [Function],
        },
        Object {
          "ariaLabel": "deviceEvents.command.refresh",
          "disabled": false,
          "iconProps": Object {
            "iconName": "Refresh",
          },
          "key": "Refresh",
          "name": "deviceEvents.command.refresh",
          "onClick": [Function],
        },
        Object {
          "ariaLabel": "deviceEvents.command.clearEvents",
          "disabled": true,
          "iconProps": Object {
            "iconName": "Delete",
          },
          "key": "Delete",
          "name": "deviceEvents.command.clearEvents",
          "onClick": [Function],
        },
      ]
    }
  />
  <Route
    component={[Function]}
  />
  <StyledTextFieldBase
    ariaLabel="deviceEvents.consumerGroups.label"
    className="consumer-group-text-field"
    disabled={false}
    label="deviceEvents.consumerGroups.label"
    onChange={[Function]}
    onRenderLabel={[Function]}
    underlined={true}
    value="$Default"
  />
  <StyledToggleBase
    ariaLabel="deviceEvents.toggle.label"
    checked={false}
    className="toggle-button"
    label="deviceEvents.toggle.label"
    offText="deviceEvents.toggle.off"
    onChange={[Function]}
    onText="deviceEvents.toggle.on"
  />
  <InfiniteScroll
    className="device-events-container"
    element="div"
    getScrollParent={null}
    hasMore={false}
    initialLoad={true}
    isReverse={true}
    key="scroll"
    loadMore={[Function]}
    loader={
      <div>
        <div
          className="events-loader"
        >
          <StyledSpinnerBase />
          <h4>
            deviceEvents.infiniteScroll.loading
          </h4>
        </div>
      </div>
    }
    pageStart={0}
    ref={null}
    threshold={250}
    useCapture={false}
    useWindow={true}
  >
    <section
      className="list-content"
    >
      <div
        className="scrollable-pnp-telemetry"
      />
    </section>
  </InfiniteScroll>
</div>
`;

exports[`components/devices/deviceEventsPerInterface matches snapshot while interface definition is retrieved in hosted environment 1`] = `
<div
  className="device-events"
  key="device-events"
>
  <StyledCommandBarBase
    className="command"
    farItems={
      Array [
        Object {
          "ariaLabel": "deviceEvents.command.close",
          "iconProps": Object {
            "iconName": "NavigateBack",
          },
          "key": "NavigateBack",
          "name": "deviceEvents.command.close",
          "onClick": [Function],
        },
      ]
    }
    items={
      Array [
        Object {
          "ariaLabel": "deviceEvents.command.fetch",
          "disabled": false,
          "iconProps": Object {
            "iconName": "Play",
          },
          "key": "Play",
          "name": "deviceEvents.command.fetch",
          "onClick": [Function],
        },
        Object {
          "ariaLabel": "deviceEvents.command.refresh",
          "disabled": false,
          "iconProps": Object {
            "iconName": "Refresh",
          },
          "key": "Refresh",
          "name": "deviceEvents.command.refresh",
          "onClick": [Function],
        },
        Object {
          "ariaLabel": "deviceEvents.command.clearEvents",
          "disabled": true,
          "iconProps": Object {
            "iconName": "Delete",
          },
          "key": "Delete",
          "name": "deviceEvents.command.clearEvents",
          "onClick": [Function],
        },
      ]
    }
  />
  <Route
    component={[Function]}
  />
  <StyledTextFieldBase
    ariaLabel="deviceEvents.consumerGroups.label"
    className="consumer-group-text-field"
    disabled={false}
    label="deviceEvents.consumerGroups.label"
    onChange={[Function]}
    onRenderLabel={[Function]}
    underlined={true}
    value="$Default"
  />
  <StyledToggleBase
    ariaLabel="deviceEvents.toggle.label"
    checked={false}
    className="toggle-button"
    label="deviceEvents.toggle.label"
    offText="deviceEvents.toggle.off"
    onChange={[Function]}
    onText="deviceEvents.toggle.on"
  />
  <InfiniteScroll
    className="device-events-container"
    element="div"
    getScrollParent={null}
    hasMore={false}
    initialLoad={true}
    isReverse={true}
    key="scroll"
    loadMore={[Function]}
    loader={
      <div>
        <div
          className="events-loader"
        >
          <StyledSpinnerBase />
          <h4>
            deviceEvents.infiniteScroll.loading
          </h4>
        </div>
      </div>
    }
    pageStart={0}
    ref={null}
    threshold={250}
    useCapture={false}
    useWindow={true}
  >
    <section
      className="list-content"
    >
      <div
        className="scrollable-pnp-telemetry"
      />
    </section>
  </InfiniteScroll>
</div>
`;

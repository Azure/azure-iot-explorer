// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`components/settings/settingsPane matches snapshot is not open 1`] = `
<StyledPanelBase
  className="settingsPane"
  closeButtonAriaLabel="common.close"
  isFooterAtBottom={true}
  isOpen={false}
  onDismiss={[Function]}
  onRenderFooter={[Function]}
  role="dialog"
  type={3}
>
  <header
    className="panel-header"
  >
    <h2>
      settings.headerText
    </h2>
  </header>
  <section
    aria-label="settings.configuration.headerText"
  >
    <h3
      aria-level={1}
      role="heading"
    >
      settings.configuration.headerText
    </h3>
    <MaskedCopyableTextField
      allowMask={true}
      ariaLabel="connectivityPane.connectionStringTextBox.label"
      calloutContent={
        <div
          className="callout-wrapper"
        >
          <div
            className="content"
          >
            settings.configuration.connectionString.sublabel
          </div>
          <div
            className="footer"
          >
            <StyledLinkBase
              href="settings.configuration.connectionString.link"
              target="_blank"
            >
              settings.configuration.connectionString.link
            </StyledLinkBase>
          </div>
        </div>
      }
      label="connectivityPane.connectionStringTextBox.label"
      onTextChange={[Function]}
      readOnly={false}
      t={
        [MockFunction] {
          "calls": Array [
            Array [
              "common.close",
            ],
            Array [
              "settings.headerText",
            ],
            Array [
              "settings.configuration.headerText",
            ],
            Array [
              "settings.configuration.headerText",
            ],
            Array [
              "connectivityPane.connectionStringTextBox.label",
            ],
            Array [
              "connectivityPane.connectionStringTextBox.label",
            ],
            Array [
              "settings.configuration.connectionString.sublabel",
            ],
            Array [
              "settings.configuration.connectionString.link",
            ],
            Array [
              "settings.configuration.connectionString.link",
            ],
            Array [
              "connectivityPane.connectionStringCheckbox.ariaLabel",
            ],
            Array [
              "connectivityPane.connectionStringCheckbox.tooltip",
            ],
            Array [
              "connectivityPane.connectionStringCheckbox.label",
            ],
            Array [
              "settings.modelDefinitions.headerText",
            ],
            Array [
              "settings.modelDefinitions.headerText",
            ],
            Array [
              "settings.modelDefinitions.helpText",
            ],
            Array [
              "settings.theme.headerText",
            ],
            Array [
              "settings.theme.headerText",
            ],
            Array [
              "settings.theme.darkTheme",
            ],
            Array [
              "settings.theme.lightTheme",
            ],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": "common.close",
            },
            Object {
              "type": "return",
              "value": "settings.headerText",
            },
            Object {
              "type": "return",
              "value": "settings.configuration.headerText",
            },
            Object {
              "type": "return",
              "value": "settings.configuration.headerText",
            },
            Object {
              "type": "return",
              "value": "connectivityPane.connectionStringTextBox.label",
            },
            Object {
              "type": "return",
              "value": "connectivityPane.connectionStringTextBox.label",
            },
            Object {
              "type": "return",
              "value": "settings.configuration.connectionString.sublabel",
            },
            Object {
              "type": "return",
              "value": "settings.configuration.connectionString.link",
            },
            Object {
              "type": "return",
              "value": "settings.configuration.connectionString.link",
            },
            Object {
              "type": "return",
              "value": "connectivityPane.connectionStringCheckbox.ariaLabel",
            },
            Object {
              "type": "return",
              "value": "connectivityPane.connectionStringCheckbox.tooltip",
            },
            Object {
              "type": "return",
              "value": "connectivityPane.connectionStringCheckbox.label",
            },
            Object {
              "type": "return",
              "value": "settings.modelDefinitions.headerText",
            },
            Object {
              "type": "return",
              "value": "settings.modelDefinitions.headerText",
            },
            Object {
              "type": "return",
              "value": "settings.modelDefinitions.helpText",
            },
            Object {
              "type": "return",
              "value": "settings.theme.headerText",
            },
            Object {
              "type": "return",
              "value": "settings.theme.headerText",
            },
            Object {
              "type": "return",
              "value": "settings.theme.darkTheme",
            },
            Object {
              "type": "return",
              "value": "settings.theme.lightTheme",
            },
          ],
        }
      }
    />
  </section>
  <div
    className="remember-connection-string"
  >
    <StyledCheckboxBase
      ariaLabel="connectivityPane.connectionStringCheckbox.ariaLabel"
      onChange={[Function]}
    />
    <Component
      tooltipText="connectivityPane.connectionStringCheckbox.tooltip"
    >
      connectivityPane.connectionStringCheckbox.label
    </Component>
  </div>
  <section
    aria-label="settings.modelDefinitions.headerText"
  >
    <h3
      aria-level={1}
      role="heading"
    >
      settings.modelDefinitions.headerText
    </h3>
    <span
      className="helptext"
    >
      settings.modelDefinitions.helpText
    </span>
    <RepositoryLocationList
      items={Array []}
      onAddListItem={[Function]}
      onMoveItem={[Function]}
      onPrivateRepositoryConnectionStringChanged={[Function]}
      onRemoveListItem={[Function]}
    />
  </section>
  <section
    aria-label="settings.theme.headerText"
  >
    <h3
      aria-level={1}
      role="heading"
    >
      settings.theme.headerText
    </h3>
    <StyledToggleBase
      checked={false}
      offText="settings.theme.lightTheme"
      onChange={[Function]}
      onText="settings.theme.darkTheme"
    />
  </section>
</StyledPanelBase>
`;

exports[`components/settings/settingsPane matches snapshot open 1`] = `
<StyledPanelBase
  className="settingsPane"
  closeButtonAriaLabel="common.close"
  isFooterAtBottom={true}
  isOpen={true}
  onDismiss={[Function]}
  onRenderFooter={[Function]}
  role="dialog"
  type={3}
>
  <header
    className="panel-header"
  >
    <h2>
      settings.headerText
    </h2>
  </header>
  <section
    aria-label="settings.configuration.headerText"
  >
    <h3
      aria-level={1}
      role="heading"
    >
      settings.configuration.headerText
    </h3>
    <MaskedCopyableTextField
      allowMask={true}
      ariaLabel="connectivityPane.connectionStringTextBox.label"
      calloutContent={
        <div
          className="callout-wrapper"
        >
          <div
            className="content"
          >
            settings.configuration.connectionString.sublabel
          </div>
          <div
            className="footer"
          >
            <StyledLinkBase
              href="settings.configuration.connectionString.link"
              target="_blank"
            >
              settings.configuration.connectionString.link
            </StyledLinkBase>
          </div>
        </div>
      }
      label="connectivityPane.connectionStringTextBox.label"
      onTextChange={[Function]}
      readOnly={false}
      t={
        [MockFunction] {
          "calls": Array [
            Array [
              "common.close",
            ],
            Array [
              "settings.headerText",
            ],
            Array [
              "settings.configuration.headerText",
            ],
            Array [
              "settings.configuration.headerText",
            ],
            Array [
              "connectivityPane.connectionStringTextBox.label",
            ],
            Array [
              "connectivityPane.connectionStringTextBox.label",
            ],
            Array [
              "settings.configuration.connectionString.sublabel",
            ],
            Array [
              "settings.configuration.connectionString.link",
            ],
            Array [
              "settings.configuration.connectionString.link",
            ],
            Array [
              "connectivityPane.connectionStringCheckbox.ariaLabel",
            ],
            Array [
              "connectivityPane.connectionStringCheckbox.tooltip",
            ],
            Array [
              "connectivityPane.connectionStringCheckbox.label",
            ],
            Array [
              "settings.modelDefinitions.headerText",
            ],
            Array [
              "settings.modelDefinitions.headerText",
            ],
            Array [
              "settings.modelDefinitions.helpText",
            ],
            Array [
              "settings.theme.headerText",
            ],
            Array [
              "settings.theme.headerText",
            ],
            Array [
              "settings.theme.darkTheme",
            ],
            Array [
              "settings.theme.lightTheme",
            ],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": "common.close",
            },
            Object {
              "type": "return",
              "value": "settings.headerText",
            },
            Object {
              "type": "return",
              "value": "settings.configuration.headerText",
            },
            Object {
              "type": "return",
              "value": "settings.configuration.headerText",
            },
            Object {
              "type": "return",
              "value": "connectivityPane.connectionStringTextBox.label",
            },
            Object {
              "type": "return",
              "value": "connectivityPane.connectionStringTextBox.label",
            },
            Object {
              "type": "return",
              "value": "settings.configuration.connectionString.sublabel",
            },
            Object {
              "type": "return",
              "value": "settings.configuration.connectionString.link",
            },
            Object {
              "type": "return",
              "value": "settings.configuration.connectionString.link",
            },
            Object {
              "type": "return",
              "value": "connectivityPane.connectionStringCheckbox.ariaLabel",
            },
            Object {
              "type": "return",
              "value": "connectivityPane.connectionStringCheckbox.tooltip",
            },
            Object {
              "type": "return",
              "value": "connectivityPane.connectionStringCheckbox.label",
            },
            Object {
              "type": "return",
              "value": "settings.modelDefinitions.headerText",
            },
            Object {
              "type": "return",
              "value": "settings.modelDefinitions.headerText",
            },
            Object {
              "type": "return",
              "value": "settings.modelDefinitions.helpText",
            },
            Object {
              "type": "return",
              "value": "settings.theme.headerText",
            },
            Object {
              "type": "return",
              "value": "settings.theme.headerText",
            },
            Object {
              "type": "return",
              "value": "settings.theme.darkTheme",
            },
            Object {
              "type": "return",
              "value": "settings.theme.lightTheme",
            },
          ],
        }
      }
    />
  </section>
  <div
    className="remember-connection-string"
  >
    <StyledCheckboxBase
      ariaLabel="connectivityPane.connectionStringCheckbox.ariaLabel"
      onChange={[Function]}
    />
    <Component
      tooltipText="connectivityPane.connectionStringCheckbox.tooltip"
    >
      connectivityPane.connectionStringCheckbox.label
    </Component>
  </div>
  <section
    aria-label="settings.modelDefinitions.headerText"
  >
    <h3
      aria-level={1}
      role="heading"
    >
      settings.modelDefinitions.headerText
    </h3>
    <span
      className="helptext"
    >
      settings.modelDefinitions.helpText
    </span>
    <RepositoryLocationList
      items={Array []}
      onAddListItem={[Function]}
      onMoveItem={[Function]}
      onPrivateRepositoryConnectionStringChanged={[Function]}
      onRemoveListItem={[Function]}
    />
  </section>
  <section
    aria-label="settings.theme.headerText"
  >
    <h3
      aria-level={1}
      role="heading"
    >
      settings.theme.headerText
    </h3>
    <StyledToggleBase
      checked={false}
      offText="settings.theme.lightTheme"
      onChange={[Function]}
      onText="settings.theme.darkTheme"
    />
  </section>
</StyledPanelBase>
`;

exports[`components/settings/settingsPane matches snapshot with repositoryLocations 1`] = `
<StyledPanelBase
  className="settingsPane"
  closeButtonAriaLabel="common.close"
  isFooterAtBottom={true}
  isOpen={true}
  onDismiss={[Function]}
  onRenderFooter={[Function]}
  role="dialog"
  type={3}
>
  <header
    className="panel-header"
  >
    <h2>
      settings.headerText
    </h2>
  </header>
  <section
    aria-label="settings.configuration.headerText"
  >
    <h3
      aria-level={1}
      role="heading"
    >
      settings.configuration.headerText
    </h3>
    <MaskedCopyableTextField
      allowMask={true}
      ariaLabel="connectivityPane.connectionStringTextBox.label"
      calloutContent={
        <div
          className="callout-wrapper"
        >
          <div
            className="content"
          >
            settings.configuration.connectionString.sublabel
          </div>
          <div
            className="footer"
          >
            <StyledLinkBase
              href="settings.configuration.connectionString.link"
              target="_blank"
            >
              settings.configuration.connectionString.link
            </StyledLinkBase>
          </div>
        </div>
      }
      label="connectivityPane.connectionStringTextBox.label"
      onTextChange={[Function]}
      readOnly={false}
      t={
        [MockFunction] {
          "calls": Array [
            Array [
              "common.close",
            ],
            Array [
              "settings.headerText",
            ],
            Array [
              "settings.configuration.headerText",
            ],
            Array [
              "settings.configuration.headerText",
            ],
            Array [
              "connectivityPane.connectionStringTextBox.label",
            ],
            Array [
              "connectivityPane.connectionStringTextBox.label",
            ],
            Array [
              "settings.configuration.connectionString.sublabel",
            ],
            Array [
              "settings.configuration.connectionString.link",
            ],
            Array [
              "settings.configuration.connectionString.link",
            ],
            Array [
              "connectivityPane.connectionStringCheckbox.ariaLabel",
            ],
            Array [
              "connectivityPane.connectionStringCheckbox.tooltip",
            ],
            Array [
              "connectivityPane.connectionStringCheckbox.label",
            ],
            Array [
              "settings.modelDefinitions.headerText",
            ],
            Array [
              "settings.modelDefinitions.headerText",
            ],
            Array [
              "settings.modelDefinitions.helpText",
            ],
            Array [
              "settings.theme.headerText",
            ],
            Array [
              "settings.theme.headerText",
            ],
            Array [
              "settings.theme.darkTheme",
            ],
            Array [
              "settings.theme.lightTheme",
            ],
          ],
          "results": Array [
            Object {
              "type": "return",
              "value": "common.close",
            },
            Object {
              "type": "return",
              "value": "settings.headerText",
            },
            Object {
              "type": "return",
              "value": "settings.configuration.headerText",
            },
            Object {
              "type": "return",
              "value": "settings.configuration.headerText",
            },
            Object {
              "type": "return",
              "value": "connectivityPane.connectionStringTextBox.label",
            },
            Object {
              "type": "return",
              "value": "connectivityPane.connectionStringTextBox.label",
            },
            Object {
              "type": "return",
              "value": "settings.configuration.connectionString.sublabel",
            },
            Object {
              "type": "return",
              "value": "settings.configuration.connectionString.link",
            },
            Object {
              "type": "return",
              "value": "settings.configuration.connectionString.link",
            },
            Object {
              "type": "return",
              "value": "connectivityPane.connectionStringCheckbox.ariaLabel",
            },
            Object {
              "type": "return",
              "value": "connectivityPane.connectionStringCheckbox.tooltip",
            },
            Object {
              "type": "return",
              "value": "connectivityPane.connectionStringCheckbox.label",
            },
            Object {
              "type": "return",
              "value": "settings.modelDefinitions.headerText",
            },
            Object {
              "type": "return",
              "value": "settings.modelDefinitions.headerText",
            },
            Object {
              "type": "return",
              "value": "settings.modelDefinitions.helpText",
            },
            Object {
              "type": "return",
              "value": "settings.theme.headerText",
            },
            Object {
              "type": "return",
              "value": "settings.theme.headerText",
            },
            Object {
              "type": "return",
              "value": "settings.theme.darkTheme",
            },
            Object {
              "type": "return",
              "value": "settings.theme.lightTheme",
            },
          ],
        }
      }
    />
  </section>
  <div
    className="remember-connection-string"
  >
    <StyledCheckboxBase
      ariaLabel="connectivityPane.connectionStringCheckbox.ariaLabel"
      onChange={[Function]}
    />
    <Component
      tooltipText="connectivityPane.connectionStringCheckbox.tooltip"
    >
      connectivityPane.connectionStringCheckbox.label
    </Component>
  </div>
  <section
    aria-label="settings.modelDefinitions.headerText"
  >
    <h3
      aria-level={1}
      role="heading"
    >
      settings.modelDefinitions.headerText
    </h3>
    <span
      className="helptext"
    >
      settings.modelDefinitions.helpText
    </span>
    <RepositoryLocationList
      items={
        Array [
          Object {
            "connectionString": undefined,
            "repositoryLocationType": "PRIVATE",
          },
        ]
      }
      onAddListItem={[Function]}
      onMoveItem={[Function]}
      onPrivateRepositoryConnectionStringChanged={[Function]}
      onRemoveListItem={[Function]}
    />
  </section>
  <section
    aria-label="settings.theme.headerText"
  >
    <h3
      aria-level={1}
      role="heading"
    >
      settings.theme.headerText
    </h3>
    <StyledToggleBase
      checked={false}
      offText="settings.theme.lightTheme"
      onChange={[Function]}
      onText="settings.theme.darkTheme"
    />
  </section>
</StyledPanelBase>
`;
